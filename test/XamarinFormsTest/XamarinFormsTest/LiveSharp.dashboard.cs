using LiveSharp;
using LiveSharp.Runtime.Infrastructure;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using Xamarin.Forms;
using XamarinFormsTest.ViewModels;

// Use this attribute to designate which types and methods will be available for runtime code update
[assembly: LiveSharpInject("*")]

// Uncomment the following line if you want to provide a custom entry point for LiveSharp runtime
//[assembly: LiveSharpStart(typeof(Program), nameof(Program.Main), typeof(string[]))]

// Uncomment if you want to specify a static IP address for the LiveSharp Server 
//[assembly: LiveSharpServerIp("xxx.xxx.xxx.xxx")]

// Disable style warnings
// ReSharper disable once CheckNamespace
// <auto-generated/>
namespace LiveSharp 
{
    class LiveSharpDashboard : ILiveSharpDashboard
    {
        private readonly ConcurrentDictionary<Type, ContentPage> _pages = new ConcurrentDictionary<Type, ContentPage>();
        
        public void Configure(ILiveSharpRuntime app) 
        {
            app.OnMethodCallIntercepted(typeof(ContentPage), (methodidentifier, instance, args) => {
                if (instance is ContentPage page)
                    _pages[page.GetType()] = page;
            });
            
            app.OnCodeUpdateReceived(updatedMethods => {
                foreach (var method in updatedMethods) {
                    var methodDeclaringType = method.DeclaringType;
                    if (!typeof(ContentPage).IsAssignableFrom(methodDeclaringType)) {
                        methodDeclaringType = methodDeclaringType.DeclaringType;
                    }

                    if (methodDeclaringType != null && _pages.TryGetValue(methodDeclaringType, out var page)) {
                        var buildMethod = methodDeclaringType.GetMethod("Build", BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                        if (buildMethod != null)
                            buildMethod.Invoke(page, new object[0]);
                    }
                }
            });
        }

        public void Run(ILiveSharpRuntime app)
        {
            // Use this method to execute any code in runtime
            // Every time you update this method LiveSharp will invoke it
        }
    } 
}