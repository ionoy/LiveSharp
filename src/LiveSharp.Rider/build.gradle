import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    ext.kotlin_version = '1.3.41'
    repositories {
        maven { url 'https://www.myget.org/F/rd-snapshots/maven/' }
        //maven { url 'https://www.jetbrains.com/intellij-repository/releases' }
        mavenCentral()
    }

    dependencies {
        classpath "com.jetbrains.rd:rd-gen:0.191.59"
        //classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.31"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.31'
    id 'org.jetbrains.intellij' version '0.3.4'
}

dependencies {
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

ext {
    repoRoot = projectDir
    isWindows = Os.isFamily(Os.FAMILY_WINDOWS)
    sdkVersion = "2019.1" // -SNAPSHOT or -EAPX suffixes possible
    rdLibDirectory = new File(repoRoot, "build/riderRD-$sdkVersion/lib/rd")
    dotNetDir = new File(repoRoot, "src/dotnet")
    dotNetPluginId = "LiveSharp.ReSharperRider"
    dotnetSolution = new File(repoRoot, "LiveSharp.Rider.sln")
}

repositories {
    maven { url 'https://cache-redirector.jetbrains.com/intellij-repository/snapshots' }
    maven { url 'https://www.jetbrains.com/intellij-repository/releases' }
    maven { url 'https://cache-redirector.jetbrains.com/maven-central' }
    flatDir { dirs rdLibDirectory.absolutePath }
    mavenCentral()
}

wrapper {
    gradleVersion = '4.9'
    distributionType = Wrapper.DistributionType.ALL
    distributionUrl = "https://cache-redirector.jetbrains.com/services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

if (!ext.has("BuildConfiguration"))
    ext.BuildConfiguration = "Release"

if (ext.has("pluginVersion"))
    ext.version = ext.pluginVersion
else
    ext.version = "1.3.3.7"

if (ext.has("username"))
    intellij.publish.username = ext.username

if (ext.has("password"))
    intellij.publish.password = ext.password

version ext.version

sourceSets {
    main {
        java.srcDir 'src/rider/main'
        resources.srcDir 'src/rider/main/resources'
    }
}

compileKotlin {
    kotlinOptions { jvmTarget = "1.8" }
}

task findMsBuild {
    doLast {
        ByteArrayOutputStream stdout = new ByteArrayOutputStream()
        if (isWindows) {
            exec {
                executable "$repoRoot\\tools\\vswhere.exe"
                args '-latest','-property','installationPath'
                standardOutput = stdout
                workingDir project.rootDir
            }
            List<String> files = new FileNameFinder().getFileNames("${stdout.toString().trim()}\\MSBuild", "**/MSBuild.exe")
            ext.executable = files.get(0)
        } else {
            exec {
                executable 'which'
                args 'msbuild'
                standardOutput = stdout
                workingDir project.rootDir
            }
            ext.executable = stdout.toString().trim()
        }
    }
}

task compileDotNet {
    dependsOn findMsBuild
    doLast {
        exec {
            executable findMsBuild.executable
            args "/t:Restore;Rebuild","$dotnetSolution","/v:minimal","/p:Configuration=$BuildConfiguration"
        }
    }
}

buildPlugin {
    dependsOn findMsBuild
    outputs.upToDateWhen { false }
    doLast {
        copy {
            from "$buildDir/distributions/$rootProject.name-${version}.zip"
            into "$rootDir/output"
        }

        def changelogText = file("$repoRoot/CHANGELOG.md").text
        def changelogMatches = changelogText =~ /(?s)(-.+?)(?=##|$)/
        def changeNotes = changelogMatches.collect {
            it[1].replaceAll(/(?s)- /, "\u2022 ").replaceAll(/`/, "").replaceAll(/,/, "%2C")
        }.take(1).join("")

        exec {
            executable findMsBuild.executable
            args "/t:Pack","$dotnetSolution","/v:minimal","/p:Configuration=$BuildConfiguration","/p:PackageOutputPath=$rootDir/output","/p:PackageReleaseNotes=$changeNotes","/p:PackageVersion=$version"
        }
    }
}

intellij {
    type = 'RD'
    version = "$sdkVersion"
    downloadSources = false
}

apply plugin: 'com.jetbrains.rdgen'
apply plugin: 'kotlin'

rdgen {
    def modelDir = new File(repoRoot, "protocol/src/main/kotlin/model")
    def csOutput = new File(repoRoot, "src/dotnet/LiveSharp.ReSharperRider/Model")
    def ktOutput = new File(repoRoot, "src/rider/main/kotlin/livesharp/model")

    verbose = true
    classpath "$rdLibDirectory/rider-model.jar"
    sources "$modelDir/rider"
    hashFolder = 'build/rdgen/rider'
    packages = "model.rider"

    generator {
        language = "kotlin"
        transform = "asis"
        root = "com.jetbrains.rider.model.nova.ide.IdeRoot"
        namespace = "com.jetbrains.rider.model"
        directory = "$ktOutput"
    }

    generator {
        language = "csharp"
        transform = "reversed"
        root = "com.jetbrains.rider.model.nova.ide.IdeRoot"
        namespace = "JetBrains.Rider.Model"
        directory = "$csOutput"
    }
}

patchPluginXml {
    def changelogText = file("$repoRoot/CHANGELOG.md").text
    def changelogMatches = changelogText =~ /(?s)(-.+?)(?=##|$)/

    changeNotes = changelogMatches.collect {
        it[1].replaceAll(/(?s)\r?\n/, "<br />\n")
    }.take(1).join('')
}

prepareSandbox {
    dependsOn compileDotNet

    def outputFolder = "$dotNetDir/LiveSharp.ReSharperRider/bin/LiveSharp.RiderPlugin/$BuildConfiguration"
    def dllFiles = [
            "$outputFolder/${dotNetPluginId}.dll",
            "$outputFolder/${dotNetPluginId}.pdb"
    ]

    dllFiles.forEach({ f ->
        def file = file(f)
        from(file, { into "$intellij.pluginName/dotnet" })
    })

    doLast {
        dllFiles.forEach({ f ->
            def file = file(f)
            if (!file.exists()) throw new RuntimeException("File $file does not exist")
        })
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}